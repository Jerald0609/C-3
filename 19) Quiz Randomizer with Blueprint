using System;
using System.Collections.Generic;
using System.Linq;

class Question
{
    public string Text { get; set; }
    public string Topic { get; set; }
    public string Difficulty { get; set; }

    public Question(string text, string topic, string difficulty)
    {
        Text = text;
        Topic = topic;
        Difficulty = difficulty;
    }

    public override string ToString()
    {
        return $"[{Topic} - {Difficulty}] {Text}";
    }
}

class QuizBuilder
{
    private List<Question> questionBank;
    private Random rng;

    public QuizBuilder(List<Question> questions, int seed)
    {
        questionBank = questions;
        rng = new Random(seed); // reproducible randomization
    }

    public List<Question> BuildQuiz(Dictionary<(string topic, string difficulty), int> blueprint)
    {
        List<Question> quiz = new List<Question>();

        foreach (var kvp in blueprint)
        {
            var key = kvp.Key;
            int neededCount = kvp.Value;

            var matchingQuestions = questionBank
                .Where(q => q.Topic == key.topic && q.Difficulty == key.difficulty)
                .OrderBy(q => rng.Next()) // shuffle deterministically with seed
                .ToList();

            if (matchingQuestions.Count >= neededCount)
            {
                quiz.AddRange(matchingQuestions.Take(neededCount));
            }
            else
            {
                Console.WriteLine($"⚠ Not enough questions for {key.topic} / {key.difficulty}. Needed {neededCount}, found {matchingQuestions.Count}.");
                quiz.AddRange(matchingQuestions); // take all available
            }
        }

        return quiz;
    }
}

class Program
{
    static void Main()
    {
        // Question Bank
        var questions = new List<Question>
        {
            new Question("What is 2+2?", "Math", "Easy"),
            new Question("Define derivative", "Math", "Hard"),
            new Question("Capital of France?", "Geography", "Easy"),
            new Question("Tallest mountain?", "Geography", "Medium"),
            new Question("Solve integral of x^2", "Math", "Medium"),
            new Question("Name 3 oceans", "Geography", "Easy")
        };

        // Blueprint: (topic, difficulty) → required count
        var blueprint = new Dictionary<(string, string), int>
        {
            { ("Math", "Easy"), 1 },
            { ("Math", "Medium"), 1 },
            { ("Geography", "Easy"), 2 },
            { ("Geography", "Hard"), 1 } // Will fail due to no hard questions
        };

        var builder = new QuizBuilder(questions, seed: 42);
        var quiz = builder.BuildQuiz(blueprint);

        Console.WriteLine("\nGenerated Quiz:");
        foreach (var q in quiz)
        {
            Console.WriteLine(q);
        }
    }
}
