using System;
using System.Collections.Generic;
using System.Linq;

class Student
{
    public string Name { get; set; }
    public List<double> Quizzes { get; set; }
    public List<double> Exams { get; set; }
    public List<double> Projects { get; set; }

    private double quizWeight, examWeight, projectWeight;

    public Student(string name, List<double> quizList, List<double> examList, List<double> projectList,
                   double quizW, double examW, double projectW)
    {
        Name = name;
        Quizzes = quizList;
        Exams = examList;
        Projects = projectList;
        quizWeight = quizW;
        examWeight = examW;
        projectWeight = projectW;
    }

    public double FinalGrade()
    {
        double quizAvg = Quizzes.Average();
        double examAvg = Exams.Average();
        double projAvg = Projects.Average();
        return (quizAvg * quizWeight + examAvg * examWeight + projAvg * projectWeight) / 100.0;
    }

    public string LetterGrade()
    {
        double final = FinalGrade();
        if (final >= 90) return "A";
        else if (final >= 80) return "B";
        else if (final >= 70) return "C";
        else if (final >= 60) return "D";
        else return "F";
    }

    public string Remarks()
    {
        switch (LetterGrade())
        {
            case "A": return "Excellent";
            case "B": return "Good";
            case "C": return "Satisfactory";
            case "D": return "Needs Improvement";
            default: return "Fail";
        }
    }
}

class Program
{
    static double GetValidScore(string prompt)
    {
        double score;
        while (true)
        {
            Console.Write(prompt);
            string input = Console.ReadLine();
            if (double.TryParse(input, out score) && score >= 0 && score <= 100)
                return score;
            Console.WriteLine("Invalid score. Please enter a number between 0 and 100.");
        }
    }

    static void Main()
    {
        Console.Write("Enter quiz, exam, and project weights (e.g. 30 50 20): ");
        string[] weightsInput = Console.ReadLine().Split();
        double quizW = double.Parse(weightsInput[0]);
        double examW = double.Parse(weightsInput[1]);
        double projW = double.Parse(weightsInput[2]);

        Console.Write("Enter number of students: ");
        int numStudents = int.Parse(Console.ReadLine());

        Console.Write("Number of quizzes: ");
        int numQuizzes = int.Parse(Console.ReadLine());
        Console.Write("Number of exams: ");
        int numExams = int.Parse(Console.ReadLine());
        Console.Write("Number of projects: ");
        int numProjects = int.Parse(Console.ReadLine());

        List<Student> students = new List<Student>();

        for (int i = 0; i < numStudents; i++)
        {
            Console.WriteLine($"\n--- Student {i + 1} ---");
            Console.Write("Name: ");
            string name = Console.ReadLine();

            List<double> quizScores = new List<double>();
            for (int q = 0; q < numQuizzes; q++)
                quizScores.Add(GetValidScore($"Quiz {q + 1}: "));

            List<double> examScores = new List<double>();
            for (int e = 0; e < numExams; e++)
                examScores.Add(GetValidScore($"Exam {e + 1}: "));

            List<double> projectScores = new List<double>();
            for (int p = 0; p < numProjects; p++)
                projectScores.Add(GetValidScore($"Project {p + 1}: "));

            students.Add(new Student(name, quizScores, examScores, projectScores, quizW, examW, projW));
        }

        // Sort by final grade descending
        var sorted = students.OrderByDescending(s => s.FinalGrade()).ToList();

        Console.WriteLine("\n=== Student Results ===");
        foreach (var s in sorted)
        {
            Console.WriteLine($"{s.Name} - Final: {s.FinalGrade():F2} - Grade: {s.LetterGrade()} - {s.Remarks()}");
        }

        Console.WriteLine("\n=== Top 3 Students ===");
        foreach (var s in sorted.Take(3))
        {
            Console.WriteLine($"{s.Name} - {s.FinalGrade():F2}");
        }

        Console.WriteLine("\n=== Below Passing (Final < 60) ===");
        foreach (var s in sorted.Where(s => s.FinalGrade() < 60))
        {
            Console.WriteLine($"{s.Name} - {s.FinalGrade():F2}");
        }
    }
}
