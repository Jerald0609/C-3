using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;

class Credential
{
    public string Service { get; set; }
    public string Username { get; set; }
    public string Password { get; set; }
}

class Vault
{
    private readonly string vaultFile;
    private readonly string masterPassword;
    private List<Credential> credentials;

    public Vault(string filePath, string masterPassword)
    {
        this.vaultFile = filePath;
        this.masterPassword = masterPassword;
        if (File.Exists(vaultFile))
        {
            try
            {
                var encrypted = File.ReadAllBytes(vaultFile);
                var decryptedJson = Encoding.UTF8.GetString(XorCipher(encrypted, masterPassword));
                credentials = JsonSerializer.Deserialize<List<Credential>>(decryptedJson) ?? new List<Credential>();
            }
            catch
            {
                throw new Exception("Failed to read vault. Master password may be incorrect.");
            }
        }
        else
        {
            credentials = new List<Credential>();
            Save();
        }
    }

    private byte[] XorCipher(byte[] data, string key)
    {
        byte[] keyBytes = Encoding.UTF8.GetBytes(key);
        byte[] output = new byte[data.Length];
        for (int i = 0; i < data.Length; i++)
            output[i] = (byte)(data[i] ^ keyBytes[i % keyBytes.Length]);
        return output;
    }

    private void Save()
    {
        var json = JsonSerializer.Serialize(credentials);
        var encrypted = XorCipher(Encoding.UTF8.GetBytes(json), masterPassword);
        File.WriteAllBytes(vaultFile, encrypted);
    }

    public void AddCredential(string service, string username, string password)
    {
        credentials.Add(new Credential { Service = service, Username = username, Password = password });
        Save();
    }

    public void ListCredentials()
    {
        Console.WriteLine("\nStored Services:");
        foreach (var c in credentials)
            Console.WriteLine($"{c.Service} - {MaskUsername(c.Username)}");
    }

    public void FindByService(string search)
    {
        var matches = credentials
            .Where(c => c.Service.Contains(search, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if (!matches.Any())
        {
            Console.WriteLine("No matches found.");
            return;
        }

        foreach (var c in matches)
        {
            Console.WriteLine($"\nService: {c.Service}");
            Console.WriteLine($"Username: {c.Username}");
            Console.WriteLine($"Password: {c.Password}");
        }
    }

    public void RemoveByService(string service)
    {
        int removed = credentials.RemoveAll(c => c.Service.Equals(service, StringComparison.OrdinalIgnoreCase));
        if (removed > 0)
        {
            Save();
            Console.WriteLine($"Removed {removed} entries for service '{service}'.");
        }
        else
        {
            Console.WriteLine("No such service found.");
        }
    }

    private string MaskUsername(string username)
    {
        if (username.Length <= 2) return "**";
        return username[0] + new string('*', username.Length - 2) + username[^1];
    }
}

class Program
{
    static void Main()
    {
        string filePath = "vault.dat";

        Console.Write("Enter master password: ");
        string master = Console.ReadLine();

        Vault vault;
        try
        {
            vault = new Vault(filePath, master);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return;
        }

        while (true)
        {
            Console.WriteLine("\nCommands: add, list, find, remove, exit");
            Console.Write("Command: ");
            string cmd = Console.ReadLine()?.Trim().ToLower();

            switch (cmd)
            {
                case "add":
                    Console.Write("Service: ");
                    string service = Console.ReadLine();
                    Console.Write("Username: ");
                    string username = Console.ReadLine();
                    Console.Write("Password: ");
                    string password = Console.ReadLine();
                    vault.AddCredential(service, username, password);
                    break;

                case "list":
                    vault.ListCredentials();
                    break;

                case "find":
                    Console.Write("Search service substring: ");
                    string search = Console.ReadLine();
                    vault.FindByService(search);
                    break;

                case "remove":
                    Console.Write("Service to remove: ");
                    string svc = Console.ReadLine();
                    vault.RemoveByService(svc);
                    break;

                case "exit":
                    return;

                default:
                    Console.WriteLine("Unknown command.");
                    break;
            }
        }
    }
}
